// Code generated by protoc-gen-go. DO NOT EDIT.
// source: unilog.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Log struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Body                 string               `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_34265d311c20fdaf, []int{0}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Log) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Log) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto.RegisterType((*Log)(nil), "pb.Log")
}

func init() { proto.RegisterFile("unilog.proto", fileDescriptor_34265d311c20fdaf) }

var fileDescriptor_34265d311c20fdaf = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xcf, 0xb1, 0x4b, 0xc5, 0x30,
	0x10, 0xc7, 0x71, 0x92, 0x27, 0x95, 0x9e, 0xc5, 0x21, 0x83, 0x94, 0x38, 0x58, 0x9c, 0x0a, 0x42,
	0x0a, 0x75, 0x12, 0x27, 0x11, 0xb7, 0x4e, 0xc5, 0x5d, 0x9a, 0x26, 0x86, 0x40, 0xea, 0x85, 0x78,
	0x1d, 0xfa, 0xdf, 0x8b, 0xa9, 0x5d, 0x7c, 0x5b, 0xf8, 0xe5, 0xcb, 0x07, 0x0e, 0xaa, 0xf5, 0xcb,
	0x07, 0x74, 0x2a, 0x26, 0x24, 0x14, 0x3c, 0x6a, 0x79, 0xeb, 0x10, 0x5d, 0xb0, 0x5d, 0x5e, 0xf4,
	0xfa, 0xd9, 0xd9, 0x25, 0xd2, 0xb6, 0x07, 0xf2, 0xee, 0xff, 0x27, 0xf9, 0xc5, 0x7e, 0xd3, 0xb4,
	0xc4, 0x3d, 0xb8, 0x37, 0x70, 0x1a, 0xd0, 0x89, 0x6b, 0xe0, 0xde, 0xd4, 0xac, 0x61, 0x6d, 0x39,
	0x72, 0x6f, 0xc4, 0x13, 0xc0, 0x9c, 0xec, 0x44, 0xd6, 0x7c, 0x4c, 0x54, 0xf3, 0x86, 0xb5, 0x57,
	0xbd, 0x54, 0x3b, 0xa6, 0x0e, 0x4c, 0xbd, 0x1f, 0xd8, 0x58, 0xfe, 0xd5, 0x2f, 0x24, 0x04, 0x5c,
	0x68, 0x34, 0x5b, 0x7d, 0xca, 0x58, 0x7e, 0xf7, 0xcf, 0x50, 0x0d, 0xe8, 0x5e, 0x31, 0x04, 0x3b,
	0x13, 0x26, 0xf1, 0x00, 0xc5, 0x68, 0x67, 0x4c, 0x46, 0x5c, 0xaa, 0xa8, 0xd5, 0x80, 0x4e, 0xde,
	0x9c, 0xe9, 0x6f, 0xbf, 0x77, 0xb4, 0x4c, 0x17, 0x79, 0x79, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff,
	0x90, 0xda, 0x65, 0x87, 0xfb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogCollectorClient is the client API for LogCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogCollectorClient interface {
	Record(ctx context.Context, opts ...grpc.CallOption) (LogCollector_RecordClient, error)
}

type logCollectorClient struct {
	cc *grpc.ClientConn
}

func NewLogCollectorClient(cc *grpc.ClientConn) LogCollectorClient {
	return &logCollectorClient{cc}
}

func (c *logCollectorClient) Record(ctx context.Context, opts ...grpc.CallOption) (LogCollector_RecordClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogCollector_serviceDesc.Streams[0], "/pb.LogCollector/Record", opts...)
	if err != nil {
		return nil, err
	}
	x := &logCollectorRecordClient{stream}
	return x, nil
}

type LogCollector_RecordClient interface {
	Send(*Log) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type logCollectorRecordClient struct {
	grpc.ClientStream
}

func (x *logCollectorRecordClient) Send(m *Log) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logCollectorRecordClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogCollectorServer is the server API for LogCollector service.
type LogCollectorServer interface {
	Record(LogCollector_RecordServer) error
}

func RegisterLogCollectorServer(s *grpc.Server, srv LogCollectorServer) {
	s.RegisterService(&_LogCollector_serviceDesc, srv)
}

func _LogCollector_Record_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogCollectorServer).Record(&logCollectorRecordServer{stream})
}

type LogCollector_RecordServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Log, error)
	grpc.ServerStream
}

type logCollectorRecordServer struct {
	grpc.ServerStream
}

func (x *logCollectorRecordServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logCollectorRecordServer) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LogCollector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LogCollector",
	HandlerType: (*LogCollectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Record",
			Handler:       _LogCollector_Record_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "unilog.proto",
}
